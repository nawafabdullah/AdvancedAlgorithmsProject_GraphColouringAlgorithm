#include<stdio.h> 
#include<stdbool.h> 
#include <iostream>
#include <fstream>
#include <string.h>

using namespace std;
// MAX Number of vertices in the graph 
const int Max_Size = 10000;

int V = 0;
bool **graph; // stores elements from input file here
bool **bool_graph;

void DISPLAY_GRAPH(bool** graph)
{

 int i,j;
  
  for (i = 0; i < V; i++) //loop through printing elements like a matrix
  {
    for (j = 0; j < V; j++)
    {
      printf ("%i \t", graph[i][j]);
     
    }
    printf ("\n");
  }


  
}



void printSolution(int color[]); 
  
/* A utility function to check if the current color assignment 
is safe for vertex v i.e. checks whether the edge exists or not 
(i.e, graph[v][i]==1). If exist then checks whether the color to  
be filled in the new vertex(c is sent in the parameter) is already 
used by its adjacent vertices(i-->adj vertices) or not (i.e, color[i]==c) */
bool isSafe (int v, bool** graph, int color[], int c) 
{ 
    for (int i = 0; i < V; i++) 
        if (graph[v][i] && c == color[i]) 
            return false; 
    return true; 
} 
  
/* A recursive utility function to solve m coloring problem */
bool graphColoringUtil(bool **graph, int m, int color[], int v) 
{ 
    /* base case: If all vertices are assigned a color then 
       return true */
    if (v == V) 
        return true; 
  
    /* Consider this vertex v and try different colors */
    for (int c = 1; c <= m; c++) 
    { 
        /* Check if assignment of color c to v is fine*/
        if (isSafe(v, graph, color, c)) 
        { 
           color[v] = c; 
  
           /* recur to assign colors to rest of the vertices */
           if (graphColoringUtil (graph, m, color, v+1) == true) 
             return true; 
  
            /* If assigning color c doesn't lead to a solution 
               then remove it */
           color[v] = 0; 
        } 
    } 
  
    /* If no color can be assigned to this vertex then return false */
    return false; 
} 
  
/* This function solves the m Coloring problem using Backtracking. 
  It mainly uses graphColoringUtil() to solve the problem. It returns 
  false if the m colors cannot be assigned, otherwise return true and 
  prints assignments of colors to all vertices. Please note that there 
  may be more than one solutions, this function prints one of the 
  feasible solutions.*/
bool graphColoring(bool** graph, int m) 
{ 
    // Initialize all color values as 0. This initialization is needed 
    // correct functioning of isSafe() 
    int color[V]; 
    for (int i = 0; i < V; i++) 
       cr[i] = 0; 
  
    // Call graphColoringUtil() for vertex 0 
    if (graphColoringUtil(graph, m, color, 0) == false) 
    { 
      printf("Solution does not exist"); 
      return false; 
    } 
  
    // Print the solution 
    printSolution(color); 
    return true; 
} 
  
/* A utility function to print solution */
void printSolution(int color[]) 
{ 
    printf("Solution Exists:"
            " Following are the assigned colors \n"); 
    for (int i = 0; i < V; i++) 
      printf(" %d ", color[i]); 
    printf("\n"); 
} int READ_FILE(string fn)
{

  cout <<"entered"<<endl;
  ifstream f;
  int v,u;
   
  f.open(fn);

 cout <<"here OPENED FILE" <<endl;


 //  if (!f)
 // cerr<<"File not openable. "<<endl; return 0;


  f >> V;   

 cout <<"here V is: "<< V <<endl;


  graph = new bool* [V];            // Less is nxn array of bool 


  cout <<"here V is: "<< V <<endl;

  
  for (int i=0; i<V; i++)
  {        // Less[u][v] means u<v in the poset
    graph[i]=new bool[V];           // Construct initial tables within the array           
    for (int j=0; j<V; j++) 
      graph[i][j]=false;    
  }



  cout << "Reading " << V <<  " nodes..." << endl;

   //if (V>) { cerr<<"n too large: "<<n<<endl; return 0;} // arbitrary
   
   f >> u;

   while (u<V && f)
   {
     f >> v; 
     while (v <V && f)
     {
       graph[u][v] = true; //since relation is identified above
       f >> v;  
     }
     f >> u;
   }
   f.close(); 
   DISPLAY_GRAPH(graph);   
   cout << "FINISHED"<<endl;

}


// driver program to test above function 
int main(int argc, char **argv) 
{ 

  /*

  /* Create following graph and test whether it is 3 colorable 
	(3)---(2) 
	| / | 
	| / | 
	| / | 
	(0)---(1) 
	*/
  /*
  bool graph[V][V] = {{0, 1, 1, 1}, 
		{1, 0, 1, 0}, 
		{1, 1, 0, 1}, 
		{1, 0, 1, 0}, 
	}; 
	int m = 3; // Number of colors 
	graphColoring (graph, m); 
	return 0; 
  */

  //ifstream input_file; // ifstream  descriptor



  const char* defaut_file_char = "default.txt";
  string default_file(defaut_file_char);
  int m;
  cout <<" IF no arguements passed.. " <<endl <<" I will attempt to open default file.. " <<endl;


  //  string default_file(argv[1]);
  if (argc > 1)
  {
    string default_file(argv[1]);
    cout <<" file name was supplied " <<endl << " attempting to open.. " << argv[1] <<endl;


    //const char* defaut_file_char = "default.txt";
    // string default_file(defaut_file_char);
    //cout <<" no arguements passed.. " <<endl <<" opening default file.. " <<endl;
    // READ_FILE(default_file); 
  }  

  //cout <<" attempting to open.. " << argv[1] <<endl;
  //  string default_file(argv[1]);
  READ_FILE(default_file); // open file
  cout <<" please enter the number of colours to check against graph" <<endl;
  cin >> m;

  graphColoring (graph, m);







  /*input_file >> V; // read and store first input here  
  int read =0;
  int v =0;
  graph = new int *[V]; // allocate memory - will be freed later -
  bool_graph = new bool *[V]; 
  
//loop inserting values and storing them in graph 
  for (int i = 0; i < V; i++)
  {
    graph[i] = new int[V]; 
    bool_graph[i]=new bool[V];

    for (int j = 0; j < V; j++)
    {      
      graph[i][j] = 0; //initilaize matrix (2d array) with 0s
      bool_graph[i][j]=false;
    }



    input_file >> read; // start reading from file and inserting data to read  
    while (read < V && input_file)
    {
      graph[i][read] = 1;
      input_file >> v;
      while(v < V && input_file)
      {
      bool_graph[i][read] = 1;
      input_file >> v;
      }
      input_file >> read;
    }
  }
 





  input_file.close(); // close file after reading
  cout << " Input Graph : " <<endl; // display to screen 
  DISPLAY_GRAPH(graph, V); // display content inside 2d array 
  // cout << endl;
  

int m = 1; // Number of colors
/*
  for (int i=0; i<V; i++)
  {        // Less[u][v] means u<v in the poset
               // Construct initial tables within the array          
    for (int j=0; j<n; j++)
      
 
  }
   
     // cout << "Reading " << n <<  " nodes..." << endl;
   if (V > Max_Size) { cerr<<"n too large: "<<n<<endl; return 0;} // arbitrary

   f >> u;

   while (u<n && f)
   {
     f >> v; 
     while (v <n && f) {
       Less[u][v] = true; //since relation is identified above
       Covers[u][v] = true;
       f >> v;  
     }
     f >> u;
   }

*/






  //  graphColoring (bool_graph, m);
	
}
 






 
